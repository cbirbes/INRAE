theme(axis.ticks.x = element_line(colour="#222222")) +
theme(axis.ticks.length = unit(0.4, "cm")) +
theme(axis.title.x = element_text(family=my_family, size=rel(1.2)*my_size_ratio)) +
guides(fill = guide_legend(override.aes = list(colour = NULL))) +
guides(fill=guide_legend(nrow=2,byrow=TRUE))
for(i in rev(c(1:length(levels(my_species))))){
detailed_values <- my_values[my_species==my_species[my_species==levels(my_species)[i]]]
total_buscos <- sum(detailed_values)
figure <- figure +
annotate("text", label=paste("C:", detailed_values[1] + detailed_values[2], " [S:", detailed_values[1], ", D:", detailed_values[2], "], F:", detailed_values[3], ", M:", detailed_values[4], ", n:", total_buscos, sep=""),
y=3, x = i, size = labsize*4*my_size_ratio, colour = "black", hjust=0, family=my_family)
}
ggsave(figure, file=my_output, width = my_width, height = my_height, unit = my_unit)
print("Done")
# Load the required libraries
library(ggplot2)
library("grid")
# !!! CONFIGURE YOUR PLOT HERE !!!
# Output
my_output <- paste(".","busco_figure.png",sep="/")
my_width <- 20
my_height <- 15
my_unit <- "cm"
# Colors
my_colors <- c( "#3492C7", "#F0E442", "#F04442", "#56B4E9")
# Bar height ratio
my_bar_height <- 0.75
# Legend
my_title <- "BUSCO Polishing pipeline E.coli Results"
# Font
my_family <- "sans"
my_size_ratio <- 1
# !!! SEE YOUR DATA HERE !!!
# Your data as generated by python, remove or add more
my_species <- c('Initial', 'Initial', 'Initial', 'Initial','2Racon','2Racon','2Racon','2Racon','2Racon2Pilon', '2Racon2Pilon', '2Racon2Pilon', '2Racon2Pilon', '2Wtdbg22Wtdbg2', '2Wtdbg22Wtdbg2', '2Wtdbg22Wtdbg2', '2Wtdbg22Wtdbg2', '2Wtdbg22Pilon', '2Wtdbg22Pilon', '2Wtdbg22Pilon', '2Wtdbg22Pilon', '2Racon2FreeBayes', '2Racon2FreeBayes', '2Racon2FreeBayes', '2Racon2FreeBayes', '5Racon3Pilon', '5Racon3Pilon', '5Racon3Pilon', '5Racon3Pilon','2Wtdbg2','2Wtdbg2','2Wtdbg2','2Wtdbg2')
my_species <- factor(my_species)
my_percentage <- c(58.5, 0.0, 29.6, 11.9, 77.7, 0.0, 17.3, 5.0, 96.3, 0.0, 1.2, 2.5, 87.8, 0.1, 6.7, 5.4, 87.8, 0.1, 6.3, 5.8, 96.3, 0.0, 1.3, 2.4, 96.0, 0.0, 1.3, 2.7, 62.2, 0.0, 26.4, 11.4)
my_values <- c(457, 0, 231, 93, 607, 0, 135, 39, 752, 0, 9, 20, 686, 1, 52, 42, 686, 1, 49, 45, 752, 0, 10, 19, 750, 0, 10, 21, 486, 0, 206, 89)
######################################
######################################
######################################
# Code to produce the graph
labsize = 1
if (length(levels(my_species)) > 10){
labsize = 0.66
}
print("Plotting the figure ...")
category <- c(rep(c("S","D","F","M"),c(1)))
category <-factor(category)
category = factor(category,levels(category)[c(1,2,3,4)])
df = data.frame(my_species,my_percentage,my_values,category)
figure <- ggplot() +
geom_bar(aes(y = my_percentage, x = my_species, fill = category), data = df, stat="identity", width=my_bar_height) +
coord_flip() +
theme_gray(base_size = 8) +
scale_y_continuous(labels = c("0","20","40","60","80","100"), breaks = c(0,20,40,60,80,100)) +
scale_fill_manual(values = my_colors,labels =c(" Complete (C) and duplicated (D)",
" Fragmented (F)  ",
" Missing (M)",
" Complete (C) and single-copy (S)  ")) +
ggtitle(my_title) +
xlab("") +
ylab("\n%BUSCOs") +
theme(plot.title = element_text(family=my_family, colour = "black", size = rel(2.2)*my_size_ratio, face = "bold")) +
theme(legend.position="top",legend.title = element_blank()) +
theme(legend.text = element_text(family=my_family, size = rel(1.2)*my_size_ratio)) +
theme(panel.background = element_rect(color="#FFFFFF", fill="white")) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) +
theme(axis.text.y = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.text.x = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.line = element_line(size=1*my_size_ratio, colour = "black")) +
theme(axis.ticks.length = unit(.85, "cm")) +
theme(axis.ticks.y = element_line(colour="white", size = 0)) +
theme(axis.ticks.x = element_line(colour="#222222")) +
theme(axis.ticks.length = unit(0.4, "cm")) +
theme(axis.title.x = element_text(family=my_family, size=rel(1.2)*my_size_ratio)) +
guides(fill = guide_legend(override.aes = list(colour = NULL))) +
guides(fill=guide_legend(nrow=2,byrow=TRUE))
for(i in rev(c(1:length(levels(my_species))))){
detailed_values <- my_values[my_species==my_species[my_species==levels(my_species)[i]]]
total_buscos <- sum(detailed_values)
figure <- figure +
annotate("text", label=paste("C:", detailed_values[1] + detailed_values[2], " [S:", detailed_values[1], ", D:", detailed_values[2], "], F:", detailed_values[3], ", M:", detailed_values[4], ", n:", total_buscos, sep=""),
y=3, x = i, size = labsize*4*my_size_ratio, colour = "black", hjust=0, family=my_family)
}
ggsave(figure, file=my_output, width = my_width, height = my_height, unit = my_unit)
print("Done")
# Load the required libraries
library(ggplot2)
library("grid")
# !!! CONFIGURE YOUR PLOT HERE !!!
# Output
my_output <- paste(".","busco_figure.png",sep="/")
my_width <- 20
my_height <- 15
my_unit <- "cm"
# Colors
my_colors <- c( "#3492C7", "#F0E442", "#F04442", "#56B4E9")
# Bar height ratio
my_bar_height <- 0.75
# Legend
my_title <- "BUSCO Polishing pipeline E.coli Results"
# Font
my_family <- "sans"
my_size_ratio <- 1
# !!! SEE YOUR DATA HERE !!!
# Your data as generated by python, remove or add more
my_species <- c('Initial', 'Initial', 'Initial', 'Initial','2Racon','2Racon','2Racon','2Racon','2Racon2Pilon', '2Racon2Pilon', '2Racon2Pilon', '2Racon2Pilon', '2Wtdbg22Wtdbg2', '2Wtdbg22Wtdbg2', '2Wtdbg22Wtdbg2', '2Wtdbg22Wtdbg2', '2Wtdbg22Pilon', '2Wtdbg22Pilon', '2Wtdbg22Pilon', '2Wtdbg22Pilon', '2Racon2FreeBayes', '2Racon2FreeBayes', '2Racon2FreeBayes', '2Racon2FreeBayes', '5Racon3Pilon', '5Racon3Pilon', '5Racon3Pilon', '5Racon3Pilon','2Wtdbg2','2Wtdbg2','2Wtdbg2','2Wtdbg2')
my_species <- factor(my_species)
my_species <- factor(my_species,levels(my_species)[c(length(levels(my_species)):1)]) # reorder your species here just by changing the values in the vector :
my_percentage <- c(58.5, 0.0, 29.6, 11.9, 77.7, 0.0, 17.3, 5.0, 96.3, 0.0, 1.2, 2.5, 87.8, 0.1, 6.7, 5.4, 87.8, 0.1, 6.3, 5.8, 96.3, 0.0, 1.3, 2.4, 96.0, 0.0, 1.3, 2.7, 62.2, 0.0, 26.4, 11.4)
my_values <- c(457, 0, 231, 93, 607, 0, 135, 39, 752, 0, 9, 20, 686, 1, 52, 42, 686, 1, 49, 45, 752, 0, 10, 19, 750, 0, 10, 21, 486, 0, 206, 89)
######################################
######################################
######################################
# Code to produce the graph
labsize = 1
if (length(levels(my_species)) > 10){
labsize = 0.66
}
print("Plotting the figure ...")
category <- c(rep(c("S","D","F","M"),c(1)))
category <-factor(category)
category = factor(category,levels(category)[c(1,2,3,4)])
df = data.frame(my_species,my_percentage,my_values,category)
figure <- ggplot() +
geom_bar(aes(y = my_percentage, x = my_species, fill = category), data = df, stat="identity", width=my_bar_height) +
coord_flip() +
theme_gray(base_size = 8) +
scale_y_continuous(labels = c("0","20","40","60","80","100"), breaks = c(0,20,40,60,80,100)) +
scale_fill_manual(values = my_colors,labels =c(" Complete (C) and duplicated (D)",
" Fragmented (F)  ",
" Missing (M)",
" Complete (C) and single-copy (S)  ")) +
ggtitle(my_title) +
xlab("") +
ylab("\n%BUSCOs") +
theme(plot.title = element_text(family=my_family, colour = "black", size = rel(2.2)*my_size_ratio, face = "bold")) +
theme(legend.position="top",legend.title = element_blank()) +
theme(legend.text = element_text(family=my_family, size = rel(1.2)*my_size_ratio)) +
theme(panel.background = element_rect(color="#FFFFFF", fill="white")) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) +
theme(axis.text.y = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.text.x = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.line = element_line(size=1*my_size_ratio, colour = "black")) +
theme(axis.ticks.length = unit(.85, "cm")) +
theme(axis.ticks.y = element_line(colour="white", size = 0)) +
theme(axis.ticks.x = element_line(colour="#222222")) +
theme(axis.ticks.length = unit(0.4, "cm")) +
theme(axis.title.x = element_text(family=my_family, size=rel(1.2)*my_size_ratio)) +
guides(fill = guide_legend(override.aes = list(colour = NULL))) +
guides(fill=guide_legend(nrow=2,byrow=TRUE))
for(i in rev(c(1:length(levels(my_species))))){
detailed_values <- my_values[my_species==my_species[my_species==levels(my_species)[i]]]
total_buscos <- sum(detailed_values)
figure <- figure +
annotate("text", label=paste("C:", detailed_values[1] + detailed_values[2], " [S:", detailed_values[1], ", D:", detailed_values[2], "], F:", detailed_values[3], ", M:", detailed_values[4], ", n:", total_buscos, sep=""),
y=3, x = i, size = labsize*4*my_size_ratio, colour = "black", hjust=0, family=my_family)
}
ggsave(figure, file=my_output, width = my_width, height = my_height, unit = my_unit)
my_species <- factor(my_species,levels(my_species)[c(length(levels(my_species)):2)]) # reorder your species here just by changing the values in the vector :
my_percentage <- c(58.5, 0.0, 29.6, 11.9, 77.7, 0.0, 17.3, 5.0, 96.3, 0.0, 1.2, 2.5, 87.8, 0.1, 6.7, 5.4, 87.8, 0.1, 6.3, 5.8, 96.3, 0.0, 1.3, 2.4, 96.0, 0.0, 1.3, 2.7, 62.2, 0.0, 26.4, 11.4)
my_values <- c(457, 0, 231, 93, 607, 0, 135, 39, 752, 0, 9, 20, 686, 1, 52, 42, 686, 1, 49, 45, 752, 0, 10, 19, 750, 0, 10, 21, 486, 0, 206, 89)
######################################
######################################
######################################
# Code to produce the graph
labsize = 1
if (length(levels(my_species)) > 10){
labsize = 0.66
}
print("Plotting the figure ...")
category <- c(rep(c("S","D","F","M"),c(1)))
category <-factor(category)
category = factor(category,levels(category)[c(1,2,3,4)])
df = data.frame(my_species,my_percentage,my_values,category)
figure <- ggplot() +
geom_bar(aes(y = my_percentage, x = my_species, fill = category), data = df, stat="identity", width=my_bar_height) +
coord_flip() +
theme_gray(base_size = 8) +
scale_y_continuous(labels = c("0","20","40","60","80","100"), breaks = c(0,20,40,60,80,100)) +
scale_fill_manual(values = my_colors,labels =c(" Complete (C) and duplicated (D)",
" Fragmented (F)  ",
" Missing (M)",
" Complete (C) and single-copy (S)  ")) +
ggtitle(my_title) +
xlab("") +
ylab("\n%BUSCOs") +
theme(plot.title = element_text(family=my_family, colour = "black", size = rel(2.2)*my_size_ratio, face = "bold")) +
theme(legend.position="top",legend.title = element_blank()) +
theme(legend.text = element_text(family=my_family, size = rel(1.2)*my_size_ratio)) +
theme(panel.background = element_rect(color="#FFFFFF", fill="white")) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) +
theme(axis.text.y = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.text.x = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.line = element_line(size=1*my_size_ratio, colour = "black")) +
theme(axis.ticks.length = unit(.85, "cm")) +
theme(axis.ticks.y = element_line(colour="white", size = 0)) +
theme(axis.ticks.x = element_line(colour="#222222")) +
theme(axis.ticks.length = unit(0.4, "cm")) +
theme(axis.title.x = element_text(family=my_family, size=rel(1.2)*my_size_ratio)) +
guides(fill = guide_legend(override.aes = list(colour = NULL))) +
guides(fill=guide_legend(nrow=2,byrow=TRUE))
for(i in rev(c(1:length(levels(my_species))))){
detailed_values <- my_values[my_species==my_species[my_species==levels(my_species)[i]]]
total_buscos <- sum(detailed_values)
figure <- figure +
annotate("text", label=paste("C:", detailed_values[1] + detailed_values[2], " [S:", detailed_values[1], ", D:", detailed_values[2], "], F:", detailed_values[3], ", M:", detailed_values[4], ", n:", total_buscos, sep=""),
y=3, x = i, size = labsize*4*my_size_ratio, colour = "black", hjust=0, family=my_family)
}
ggsave(figure, file=my_output, width = my_width, height = my_height, unit = my_unit)
print("Done")
# Load the required libraries
library(ggplot2)
library("grid")
# !!! CONFIGURE YOUR PLOT HERE !!!
# Output
my_output <- paste(".","busco_figure.png",sep="/")
my_width <- 20
my_height <- 15
my_unit <- "cm"
# Colors
my_colors <- c( "#3492C7", "#F0E442", "#F04442", "#56B4E9")
# Bar height ratio
my_bar_height <- 0.75
# Legend
my_title <- "BUSCO Polishing pipeline E.coli Results"
# Font
my_family <- "sans"
my_size_ratio <- 1
# !!! SEE YOUR DATA HERE !!!
# Your data as generated by python, remove or add more
my_species <- c('Initial', 'Initial', 'Initial', 'Initial','2Racon','2Racon','2Racon','2Racon','2Racon2Pilon', '2Racon2Pilon', '2Racon2Pilon', '2Racon2Pilon', '2Wtdbg22Wtdbg2', '2Wtdbg22Wtdbg2', '2Wtdbg22Wtdbg2', '2Wtdbg22Wtdbg2', '2Wtdbg22Pilon', '2Wtdbg22Pilon', '2Wtdbg22Pilon', '2Wtdbg22Pilon', '2Racon2FreeBayes', '2Racon2FreeBayes', '2Racon2FreeBayes', '2Racon2FreeBayes', '5Racon3Pilon', '5Racon3Pilon', '5Racon3Pilon', '5Racon3Pilon','2Wtdbg2','2Wtdbg2','2Wtdbg2','2Wtdbg2')
my_species <- factor(my_species)
my_species <- factor(my_species,levels(my_species)[c(length(levels(my_species)):1)]) # reorder your species here just by changing the values in the vector :
my_percentage <- c(58.5, 0.0, 29.6, 11.9, 77.7, 0.0, 17.3, 5.0, 96.3, 0.0, 1.2, 2.5, 87.8, 0.1, 6.7, 5.4, 87.8, 0.1, 6.3, 5.8, 96.3, 0.0, 1.3, 2.4, 96.0, 0.0, 1.3, 2.7, 62.2, 0.0, 26.4, 11.4)
my_values <- c(457, 0, 231, 93, 607, 0, 135, 39, 752, 0, 9, 20, 686, 1, 52, 42, 686, 1, 49, 45, 752, 0, 10, 19, 750, 0, 10, 21, 486, 0, 206, 89)
######################################
######################################
######################################
# Code to produce the graph
labsize = 1
if (length(levels(my_species)) > 10){
labsize = 0.66
}
print("Plotting the figure ...")
category <- c(rep(c("S","D","F","M"),c(1)))
category <-factor(category)
category = factor(category,levels(category)[c(1,2,3,4)])
df = data.frame(my_species,my_percentage,my_values,category)
figure <- ggplot() +
geom_bar(aes(y = my_percentage, x = my_species, fill = category), data = df, stat="identity", width=my_bar_height) +
coord_flip() +
theme_gray(base_size = 8) +
scale_y_continuous(labels = c("0","20","40","60","80","100"), breaks = c(0,20,40,60,80,100)) +
scale_fill_manual(values = my_colors,labels =c(" Complete (C) and duplicated (D)",
" Fragmented (F)  ",
" Missing (M)",
" Complete (C) and single-copy (S)  ")) +
ggtitle(my_title) +
xlab("") +
ylab("\n%BUSCOs") +
theme(plot.title = element_text(family=my_family, colour = "black", size = rel(2.2)*my_size_ratio, face = "bold")) +
theme(legend.position="top",legend.title = element_blank()) +
theme(legend.text = element_text(family=my_family, size = rel(1.2)*my_size_ratio)) +
theme(panel.background = element_rect(color="#FFFFFF", fill="white")) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) +
theme(axis.text.y = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.text.x = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.line = element_line(size=1*my_size_ratio, colour = "black")) +
theme(axis.ticks.length = unit(.85, "cm")) +
theme(axis.ticks.y = element_line(colour="white", size = 0)) +
theme(axis.ticks.x = element_line(colour="#222222")) +
theme(axis.ticks.length = unit(0.4, "cm")) +
theme(axis.title.x = element_text(family=my_family, size=rel(1.2)*my_size_ratio)) +
guides(fill = guide_legend(override.aes = list(colour = NULL))) +
guides(fill=guide_legend(nrow=2,byrow=TRUE))
for(i in rev(c(1:length(levels(my_species))))){
detailed_values <- my_values[my_species==my_species[my_species==levels(my_species)[i]]]
total_buscos <- sum(detailed_values)
figure <- figure +
annotate("text", label=paste("C:", detailed_values[1] + detailed_values[2], " [S:", detailed_values[1], ", D:", detailed_values[2], "], F:", detailed_values[3], ", M:", detailed_values[4], ", n:", total_buscos, sep=""),
y=3, x = i, size = labsize*4*my_size_ratio, colour = "black", hjust=0, family=my_family)
}
ggsave(figure, file=my_output, width = my_width, height = my_height, unit = my_unit)
# Load the required libraries
library(ggplot2)
library("grid")
# !!! CONFIGURE YOUR PLOT HERE !!!
# Output
my_output <- paste(".","busco_figure.png",sep="/")
my_width <- 20
my_height <- 15
my_unit <- "cm"
# Colors
my_colors <- c( "#3492C7", "#F0E442", "#F04442", "#56B4E9")
# Bar height ratio
my_bar_height <- 0.75
# Legend
my_title <- "BUSCO Polishing pipeline E.coli Results"
# Font
my_family <- "sans"
my_size_ratio <- 1
# !!! SEE YOUR DATA HERE !!!
# Your data as generated by python, remove or add more
my_species <- c('1 Initial', '1 Initial', '1 Initial', '1 Initial','3 2Racon','3 2Racon','3 2Racon','3 2Racon','2Racon2Pilon', '2Racon2Pilon', '2Racon2Pilon', '2Racon2Pilon', '2Wtdbg22Wtdbg2', '2Wtdbg22Wtdbg2', '2Wtdbg22Wtdbg2', '2Wtdbg22Wtdbg2', '2Wtdbg22Pilon', '2Wtdbg22Pilon', '2Wtdbg22Pilon', '2Wtdbg22Pilon', '2Racon2FreeBayes', '2Racon2FreeBayes', '2Racon2FreeBayes', '2Racon2FreeBayes', '5Racon3Pilon', '5Racon3Pilon', '5Racon3Pilon', '5Racon3Pilon','2 2Wtdbg2','2 2Wtdbg2','2 2Wtdbg2','2 2Wtdbg2')
my_species <- factor(my_species)
my_species <- factor(my_species,levels(my_species)[c(length(levels(my_species)):1)]) # reorder your species here just by changing the values in the vector :
my_percentage <- c(58.5, 0.0, 29.6, 11.9, 77.7, 0.0, 17.3, 5.0, 96.3, 0.0, 1.2, 2.5, 87.8, 0.1, 6.7, 5.4, 87.8, 0.1, 6.3, 5.8, 96.3, 0.0, 1.3, 2.4, 96.0, 0.0, 1.3, 2.7, 62.2, 0.0, 26.4, 11.4)
my_values <- c(457, 0, 231, 93, 607, 0, 135, 39, 752, 0, 9, 20, 686, 1, 52, 42, 686, 1, 49, 45, 752, 0, 10, 19, 750, 0, 10, 21, 486, 0, 206, 89)
######################################
######################################
######################################
# Code to produce the graph
labsize = 1
if (length(levels(my_species)) > 10){
labsize = 0.66
}
print("Plotting the figure ...")
category <- c(rep(c("S","D","F","M"),c(1)))
category <-factor(category)
category = factor(category,levels(category)[c(1,2,3,4)])
df = data.frame(my_species,my_percentage,my_values,category)
figure <- ggplot() +
geom_bar(aes(y = my_percentage, x = my_species, fill = category), data = df, stat="identity", width=my_bar_height) +
coord_flip() +
theme_gray(base_size = 8) +
scale_y_continuous(labels = c("0","20","40","60","80","100"), breaks = c(0,20,40,60,80,100)) +
scale_fill_manual(values = my_colors,labels =c(" Complete (C) and duplicated (D)",
" Fragmented (F)  ",
" Missing (M)",
" Complete (C) and single-copy (S)  ")) +
ggtitle(my_title) +
xlab("") +
ylab("\n%BUSCOs") +
theme(plot.title = element_text(family=my_family, colour = "black", size = rel(2.2)*my_size_ratio, face = "bold")) +
theme(legend.position="top",legend.title = element_blank()) +
theme(legend.text = element_text(family=my_family, size = rel(1.2)*my_size_ratio)) +
theme(panel.background = element_rect(color="#FFFFFF", fill="white")) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) +
theme(axis.text.y = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.text.x = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.line = element_line(size=1*my_size_ratio, colour = "black")) +
theme(axis.ticks.length = unit(.85, "cm")) +
theme(axis.ticks.y = element_line(colour="white", size = 0)) +
theme(axis.ticks.x = element_line(colour="#222222")) +
theme(axis.ticks.length = unit(0.4, "cm")) +
theme(axis.title.x = element_text(family=my_family, size=rel(1.2)*my_size_ratio)) +
guides(fill = guide_legend(override.aes = list(colour = NULL))) +
guides(fill=guide_legend(nrow=2,byrow=TRUE))
for(i in rev(c(1:length(levels(my_species))))){
detailed_values <- my_values[my_species==my_species[my_species==levels(my_species)[i]]]
total_buscos <- sum(detailed_values)
figure <- figure +
annotate("text", label=paste("C:", detailed_values[1] + detailed_values[2], " [S:", detailed_values[1], ", D:", detailed_values[2], "], F:", detailed_values[3], ", M:", detailed_values[4], ", n:", total_buscos, sep=""),
y=3, x = i, size = labsize*4*my_size_ratio, colour = "black", hjust=0, family=my_family)
}
ggsave(figure, file=my_output, width = my_width, height = my_height, unit = my_unit)
# Load the required libraries
library(ggplot2)
library("grid")
# !!! CONFIGURE YOUR PLOT HERE !!!
# Output
my_output <- paste(".","busco_figure.png",sep="/")
my_width <- 20
my_height <- 15
my_unit <- "cm"
# Colors
my_colors <- c( "#3492C7", "#F0E442", "#F04442", "#56B4E9")
# Bar height ratio
my_bar_height <- 0.75
# Legend
my_title <- "BUSCO Polishing pipeline E.coli Results"
# Font
my_family <- "sans"
my_size_ratio <- 1
# !!! SEE YOUR DATA HERE !!!
# Your data as generated by python, remove or add more
my_species <- c('1 Initial', '1 Initial', '1 Initial', '1 Initial','3 2Racon','3 2Racon','3 2Racon','3 2Racon','2Racon2Pilon', '2Racon2Pilon', '2Racon2Pilon', '2Racon2Pilon', '5 2Wtdbg22Wtdbg2', '5 2Wtdbg22Wtdbg2', '5 2Wtdbg22Wtdbg2', '5 2Wtdbg22Wtdbg2', '4 2Wtdbg22Pilon', '4 2Wtdbg22Pilon', '4 2Wtdbg22Pilon', '4 2Wtdbg22Pilon', '2Racon2FreeBayes', '2Racon2FreeBayes', '2Racon2FreeBayes', '2Racon2FreeBayes', '6 5Racon3Pilon', '6 5Racon3Pilon', '6 5Racon3Pilon', '6 5Racon3Pilon','2 2Wtdbg2','2 2Wtdbg2','2 2Wtdbg2','2 2Wtdbg2')
my_species <- factor(my_species)
my_species <- factor(my_species,levels(my_species)[c(length(levels(my_species)):1)]) # reorder your species here just by changing the values in the vector :
my_percentage <- c(58.5, 0.0, 29.6, 11.9, 77.7, 0.0, 17.3, 5.0, 96.3, 0.0, 1.2, 2.5, 87.8, 0.1, 6.7, 5.4, 87.8, 0.1, 6.3, 5.8, 96.3, 0.0, 1.3, 2.4, 96.0, 0.0, 1.3, 2.7, 62.2, 0.0, 26.4, 11.4)
my_values <- c(457, 0, 231, 93, 607, 0, 135, 39, 752, 0, 9, 20, 686, 1, 52, 42, 686, 1, 49, 45, 752, 0, 10, 19, 750, 0, 10, 21, 486, 0, 206, 89)
######################################
######################################
######################################
# Code to produce the graph
labsize = 1
if (length(levels(my_species)) > 10){
labsize = 0.66
}
print("Plotting the figure ...")
category <- c(rep(c("S","D","F","M"),c(1)))
category <-factor(category)
category = factor(category,levels(category)[c(1,2,3,4)])
df = data.frame(my_species,my_percentage,my_values,category)
figure <- ggplot() +
geom_bar(aes(y = my_percentage, x = my_species, fill = category), data = df, stat="identity", width=my_bar_height) +
coord_flip() +
theme_gray(base_size = 8) +
scale_y_continuous(labels = c("0","20","40","60","80","100"), breaks = c(0,20,40,60,80,100)) +
scale_fill_manual(values = my_colors,labels =c(" Complete (C) and duplicated (D)",
" Fragmented (F)  ",
" Missing (M)",
" Complete (C) and single-copy (S)  ")) +
ggtitle(my_title) +
xlab("") +
ylab("\n%BUSCOs") +
theme(plot.title = element_text(family=my_family, colour = "black", size = rel(2.2)*my_size_ratio, face = "bold")) +
theme(legend.position="top",legend.title = element_blank()) +
theme(legend.text = element_text(family=my_family, size = rel(1.2)*my_size_ratio)) +
theme(panel.background = element_rect(color="#FFFFFF", fill="white")) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) +
theme(axis.text.y = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.text.x = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.line = element_line(size=1*my_size_ratio, colour = "black")) +
theme(axis.ticks.length = unit(.85, "cm")) +
theme(axis.ticks.y = element_line(colour="white", size = 0)) +
theme(axis.ticks.x = element_line(colour="#222222")) +
theme(axis.ticks.length = unit(0.4, "cm")) +
theme(axis.title.x = element_text(family=my_family, size=rel(1.2)*my_size_ratio)) +
guides(fill = guide_legend(override.aes = list(colour = NULL))) +
guides(fill=guide_legend(nrow=2,byrow=TRUE))
for(i in rev(c(1:length(levels(my_species))))){
detailed_values <- my_values[my_species==my_species[my_species==levels(my_species)[i]]]
total_buscos <- sum(detailed_values)
figure <- figure +
annotate("text", label=paste("C:", detailed_values[1] + detailed_values[2], " [S:", detailed_values[1], ", D:", detailed_values[2], "], F:", detailed_values[3], ", M:", detailed_values[4], ", n:", total_buscos, sep=""),
y=3, x = i, size = labsize*4*my_size_ratio, colour = "black", hjust=0, family=my_family)
}
ggsave(figure, file=my_output, width = my_width, height = my_height, unit = my_unit)
print("Done")
# Load the required libraries
library(ggplot2)
library("grid")
# !!! CONFIGURE YOUR PLOT HERE !!!
# Output
my_output <- paste(".","busco_figure.png",sep="/")
my_width <- 20
my_height <- 15
my_unit <- "cm"
# Colors
my_colors <- c( "#3492C7", "#F0E442", "#F04442", "#56B4E9")
# Bar height ratio
my_bar_height <- 0.75
# Legend
my_title <- "BUSCO Polishing pipeline E.coli Results"
# Font
my_family <- "sans"
my_size_ratio <- 1
# !!! SEE YOUR DATA HERE !!!
# Your data as generated by python, remove or add more
my_species <- c('1 Initial', '1 Initial', '1 Initial', '1 Initial','3 2Racon','3 2Racon','3 2Racon','3 2Racon','7 2Racon2Pilon', '7 2Racon2Pilon', '7 2Racon2Pilon', '7 2Racon2Pilon', '5 2Wtdbg22Wtdbg2', '5 2Wtdbg22Wtdbg2', '5 2Wtdbg22Wtdbg2', '5 2Wtdbg22Wtdbg2', '4 2Wtdbg22Pilon', '4 2Wtdbg22Pilon', '4 2Wtdbg22Pilon', '4 2Wtdbg22Pilon', '8 2Racon2FreeBayes', '8 2Racon2FreeBayes', '8 2Racon2FreeBayes', '8 2Racon2FreeBayes', '6 5Racon3Pilon', '6 5Racon3Pilon', '6 5Racon3Pilon', '6 5Racon3Pilon','2 2Wtdbg2','2 2Wtdbg2','2 2Wtdbg2','2 2Wtdbg2')
my_species <- factor(my_species)
my_species <- factor(my_species,levels(my_species)[c(length(levels(my_species)):1)]) # reorder your species here just by changing the values in the vector :
my_percentage <- c(58.5, 0.0, 29.6, 11.9, 77.7, 0.0, 17.3, 5.0, 96.3, 0.0, 1.2, 2.5, 87.8, 0.1, 6.7, 5.4, 87.8, 0.1, 6.3, 5.8, 96.3, 0.0, 1.3, 2.4, 96.0, 0.0, 1.3, 2.7, 62.2, 0.0, 26.4, 11.4)
my_values <- c(457, 0, 231, 93, 607, 0, 135, 39, 752, 0, 9, 20, 686, 1, 52, 42, 686, 1, 49, 45, 752, 0, 10, 19, 750, 0, 10, 21, 486, 0, 206, 89)
######################################
######################################
######################################
# Code to produce the graph
labsize = 1
if (length(levels(my_species)) > 10){
labsize = 0.66
}
print("Plotting the figure ...")
category <- c(rep(c("S","D","F","M"),c(1)))
category <-factor(category)
category = factor(category,levels(category)[c(1,2,3,4)])
df = data.frame(my_species,my_percentage,my_values,category)
figure <- ggplot() +
geom_bar(aes(y = my_percentage, x = my_species, fill = category), data = df, stat="identity", width=my_bar_height) +
coord_flip() +
theme_gray(base_size = 8) +
scale_y_continuous(labels = c("0","20","40","60","80","100"), breaks = c(0,20,40,60,80,100)) +
scale_fill_manual(values = my_colors,labels =c(" Complete (C) and duplicated (D)",
" Fragmented (F)  ",
" Missing (M)",
" Complete (C) and single-copy (S)  ")) +
ggtitle(my_title) +
xlab("") +
ylab("\n%BUSCOs") +
theme(plot.title = element_text(family=my_family, colour = "black", size = rel(2.2)*my_size_ratio, face = "bold")) +
theme(legend.position="top",legend.title = element_blank()) +
theme(legend.text = element_text(family=my_family, size = rel(1.2)*my_size_ratio)) +
theme(panel.background = element_rect(color="#FFFFFF", fill="white")) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) +
theme(axis.text.y = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.text.x = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.line = element_line(size=1*my_size_ratio, colour = "black")) +
theme(axis.ticks.length = unit(.85, "cm")) +
theme(axis.ticks.y = element_line(colour="white", size = 0)) +
theme(axis.ticks.x = element_line(colour="#222222")) +
theme(axis.ticks.length = unit(0.4, "cm")) +
theme(axis.title.x = element_text(family=my_family, size=rel(1.2)*my_size_ratio)) +
guides(fill = guide_legend(override.aes = list(colour = NULL))) +
guides(fill=guide_legend(nrow=2,byrow=TRUE))
for(i in rev(c(1:length(levels(my_species))))){
detailed_values <- my_values[my_species==my_species[my_species==levels(my_species)[i]]]
total_buscos <- sum(detailed_values)
figure <- figure +
annotate("text", label=paste("C:", detailed_values[1] + detailed_values[2], " [S:", detailed_values[1], ", D:", detailed_values[2], "], F:", detailed_values[3], ", M:", detailed_values[4], ", n:", total_buscos, sep=""),
y=3, x = i, size = labsize*4*my_size_ratio, colour = "black", hjust=0, family=my_family)
}
ggsave(figure, file=my_output, width = my_width, height = my_height, unit = my_unit)
