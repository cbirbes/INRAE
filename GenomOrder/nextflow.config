#!/usr/bin/env nextflow

/*
 * -------------------------------------------------
 *  GenomOrder config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

 // Global default params, used in configs
 params {

 tracedir 						= "${params.outdir}/pipeline_info"
 // Options: Mandatory
 assembly		        = false
 reference  		    = false

 // Options:
 assembly2 		      = false
 assembly3 		      = false
 assembly4 		      = false
 assembly5 		      = false

 arrange            = false
 compare            = false

 // Defaults only, expecting to be overwritten
 max_memory          = 150.GB
 max_cpus            = 8
 max_time            = 3.d
}

process.shell = ['/bin/bash','-e']

profiles {

        small { includeConfig 'conf/small.config'}
        medium { includeConfig 'conf/medium.config'}
        local { includeConfig 'conf/local.config'}
  conda { process.conda = 'env/environment.yml'}
}


timeline {
	enabled = true
	file = "${params.tracedir}/execution_timeline.html"
}
report {
	enabled = true
	file = "${params.tracedir}/execution_report.html"
}
trace {
	enabled = true
	file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}


manifest {
	name = 'GenomOrder'
	author = 'Clement Birbes'
	homePage = 'https://forgemia.inra.fr/seqoccin/axis1-assembly/tree/dev/'
	description = 'Organize and Plot Assembly'
	mainScript = 'main.nf'
	nextflowVersion = '>=20.01.0'
  version = '1.1'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
